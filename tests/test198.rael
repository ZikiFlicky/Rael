load :System

%% Test :System:Eval
catch :System:Eval(2) with :err {
    log :err
}

log :System:Eval("1 + 2 * 5")

:a ?= 10

log :System:Eval(":a - 2")

log :System:Eval(":a + 2", 0)

log :System:Eval(":a", 1)

%% Test :System:Run
catch :System:Run(2) with :err {
    log :err
}

log :System:Run("log 1 + 2 * 5\nlog \"string\"")

:a ?= 10

:command ?= ":b ?= 4\nlog :a, :b"

:System:Run(:command) %% Inherit scope

log ":b is", :b

:b ?= 3

:System:Run(:command, 0) %% Inherit scope

log ":b is", :b

:b ?= 10

:System:Run(:command, 1) %% Don't inherit scope

log ":b is", :b

:System:SomeKey ?= 5

:command ?= "log :System\nload :System\nlog :System\nlog :System:SomeKey"
:System:Run(:command)
:System:Run(:command, 1)

:instance ?= :System:Instance("Name")
log :instance
:instance:run("log 2") %% 2
:instance:run("log :System") %% Void
:instance:run(":a ?= 3")
:instance:run("log :a") %% 3
:b ?= "please don't reach this"
:instance:run("log :b") %% Void
:System:SomeKey ?= "value"
:instance:run(
"log :System:SomeKey\n\
load :System\n\
log :System\n\
log:System:SomeKey") %% Void, module(:System), Void

:instance:resetScope()
:instance:run("log :System\nlog :a") %% Void, Void

log :instance:eval("2 * 1") %% 2
:instance:run(":a ?= 3")
log :instance:eval("\n:a * 5\n") %% 15
