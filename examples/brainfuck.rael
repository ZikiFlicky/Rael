%% Brainfuck, implemented in Rael
:input getstring("Enter brainfuck code: ")
:tape_size 128

:i 0
:tape { }
:tape_idx 0

:input_stream ""

routine() {
    :n :tape_size
    loop :n {
        :tape << 0
        :n :n - 1
    }
}()

:parse routine() {
    if :i > sizeof(:input) - 1
        ^ blame "Parse out of range"
    :c :input at :i

    :out match :c {
    with ">" {
        ^{"TapeRight"}
    }
    with "<" {
        ^{"TapeLeft"}
    }
    with "+" {
        ^{"Add"}
    }
    with "-" {
        ^{"Sub"}
    }
    with "[" {
        :i :i + 1
        :instructions {}

        loop {
            if :i > sizeof(:input) - 1 {
                ^blame "Unmatched '['"
            } else if :input at :i = "]" {
                ^{"Loop", :instructions}
            } else {
                %% try to parse
                :instruction :parse()
                if :instruction {
                    :instructions << :instruction
                }
            }
        }
    }
    with "]" {
        ^blame "Unmatched '['"
    }
    with "." {
        ^{"Log"}
    }
    with "," {
        ^{"Get"}
    }
    }
    :i :i + 1
    ^:out
}

:run_instruction routine(:instruction) {
    ^match :instruction at 0 {
    with "TapeRight" {
        if :tape_idx = :tape_size - 1
            ^blame "Can't move right when on the rightmost tape block"
        :tape_idx :tape_idx + 1
    }
    with "TapeLeft" {
        if :tape_idx = 0
            ^blame "Can't move left when on the leftmost tape block"
        :tape_idx :tape_idx - 1
    }
    with "Add" {
        if :tape at :tape_idx = 127
            :tape at :tape_idx 0-128
        else
            :tape at :tape_idx 1 + (:tape at :tape_idx)
    }
    with "Sub" {
        if :tape at :tape_idx = -128 {
            :tape at :tape_idx 127
        } else {
            :new_tape_value :tape at :tape_idx
            :new_tape_value :new_tape_value - 1
            :tape at :tape_idx :new_tape_value
        }
    }
    with "Loop" {
        loop :tape at :tape_idx {
            loop :1 through :instruction at 1 {
                :run_instruction(:1)
            }
        }
    }
    with "Log" {
        show "" + (:tape at :tape_idx)
    }
    with "Get" {
        if sizeof(:input_stream) = 0
            :input_stream :input_stream + getstring("") + "\n"

        :tape at :tape_idx :input_stream to Stack at 0
        :input_stream :input_stream at (1 to sizeof(:input_stream))
    }
    else {
        ^blame "Unexpected instruction"
    }
    }
}

:parse_all routine() {
    :instructions {}

    loop {
        if :i > sizeof(:input) - 1 {
            break
        } else {
            :instruction :parse()
            if :instruction
                :instructions << :instruction
        }
    }

    ^:instructions
}

:run_all routine() {
    :all_instructions :parse_all()

    loop :instruction through :all_instructions {
        :run_instruction(:instruction)
    }
}

routine() {
    :run_all()
}()
